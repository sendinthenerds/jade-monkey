// Generated by CoffeeScript 1.6.2
(function() {
  var JadeMonkey, fs, jade, log, promise, sequence,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  log = console.log;

  fs = require('fs');

  promise = require('when');

  sequence = require('when/sequence');

  jade = require('jade');

  JadeMonkey = (function() {
    function JadeMonkey() {
      this.getJadeStrings = __bind(this.getJadeStrings, this);
      this.sortFiles = __bind(this.sortFiles, this);
      this.readFiles = __bind(this.readFiles, this);
      var taskPromise, tasks,
        _this = this;

      log('Hi :D');
      this.postsDir = './test-blog/posts/';
      this.postPaths = this.postFiles = this.postsArray = [];
      tasks = [this.readFiles, this.getJadeStrings, this.sortFiles];
      taskPromise = sequence(tasks);
      taskPromise.then((function(result) {
        return log(_this.postsArray);
      }), function(err) {
        return log(err);
      });
    }

    JadeMonkey.prototype.readFiles = function() {
      var deferred,
        _this = this;

      log('Reading Files');
      deferred = promise.defer();
      fs.readdir(this.postsDir, function(err, postFiles) {
        if (err) {
          deferred.reject(new Error('Could not read post directory'));
        }
        _this.postFiles = postFiles;
        return deferred.resolve(postFiles);
      });
      return deferred.promise;
    };

    JadeMonkey.prototype.sortFiles = function() {
      var compare, deferred;

      compare = function(a, b) {
        if (a.ctime > b.ctime) {
          -1;
        }
        if (a.ctime < b.ctime) {
          return +1;
        }
      };
      deferred = promise.defer();
      log(this.postsArray);
      this.postsArray.sort(compare);
      deferred.resolve(true);
      return deferred.promise;
    };

    JadeMonkey.prototype.getJadeStrings = function() {
      var compileFunction, ctime, deferred, htmlString, jadeString, localFileVariables, options, post, postObject, _i, _len, _ref;

      deferred = promise.defer();
      _ref = this.postFiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        post = _ref[_i];
        jadeString = fs.readFileSync(this.postsDir + post);
        options = {
          filename: this.postsDir + post
        };
        compileFunction = jade.compile(jadeString, options);
        ctime = fs.statSync(this.postsDir + post).ctime;
        localFileVariables = {
          title: "Booyaka",
          ctime: ctime,
          mtime: fs.statSync(this.postsDir + post).mtime
        };
        htmlString = compileFunction(localFileVariables);
        postObject = {
          name: post,
          html: htmlString,
          ctime: ctime.getTime(),
          created: ctime
        };
        this.postsArray.push(postObject);
      }
      deferred.resolve(true);
      return deferred.promise;
    };

    return JadeMonkey;

  })();

  new JadeMonkey;

}).call(this);
